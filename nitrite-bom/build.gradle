plugins {
    id 'java-platform'
    id 'signing'
    id 'maven-publish'
}

version = "$nitriteVersion"

repositories {
    mavenCentral()
}

dependencies {
    constraints {
        api project(":nitrite")
        api project(":nitrite-jackson-mapper")
        api project(":nitrite-spatial")
        api project(":nitrite-replication")
        api project(":nitrite-support")
        api project(":potassium-nitrite")
        api project(":nitrite-mvstore-adapter")
        api project(":nitrite-rocksdb-adapter")

        api "org.slf4j:slf4j-api:1.7.32"
        api "org.objenesis:objenesis:2.6"
        api "org.jasypt:jasypt:1.9.3"
        api "com.fasterxml.jackson.core:jackson-databind:2.13.3"
        api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3"
        api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.3"
        api "com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3"
        api "com.h2database:h2-mvstore:2.1.214"
        api "com.squareup.okhttp3:okhttp:4.9.3"
        api "org.rocksdb:rocksdbjni:7.2.2"
        api "com.esotericsoftware.kryo:kryo5:5.2.1"
        api "org.locationtech.jts:jts-core:1.19.0"
        api "commons-codec:commons-codec:1.15"
        api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21"
        api "org.jetbrains.kotlin:kotlin-reflect:1.6.21"
    }
}

publishing {
    publications {
        myPlatform(MavenPublication) {
            from components.javaPlatform
        }
    }
    repositories {
        if (version.endsWith('SNAPSHOT') || project.hasProperty('release')) {
            maven {
                name = "OSSRH"
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username System.getenv('MAVEN_USERNAME')
                    password System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}

signing {
    sign publishing.publications.myPlatform
}