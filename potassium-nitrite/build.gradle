/*
 * Copyright (c) 2017-2020. Nitrite author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.0"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.6.0"
    }
}


plugins {
    id "org.jetbrains.kotlin.jvm" version "1.6.0"
    id "org.jetbrains.dokka" version "1.6.0"
    id 'signing'
    id 'maven-publish'
    id 'com.github.hauner.jarTest'
    id 'jacoco'
}

repositories {
    jcenter()
    mavenCentral()
}

jar {
    archivesBaseName = 'potassium-nitrite'
}

dependencies {
    api platform(project(':nitrite-bom'))
    api project(':nitrite')
    api project(':nitrite-spatial')
    api project(':nitrite-jackson-mapper')

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    api "org.jetbrains.kotlin:kotlin-reflect"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    api "com.fasterxml.jackson.module:jackson-module-kotlin"

    testApi project(':nitrite-mvstore-adapter')
    testImplementation "junit:junit:4.13.2"
    testImplementation "joda-time:joda-time:2.10.13"
    testImplementation "org.threeten:threetenbp:1.5.2"
    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:2.14.1"
    testImplementation "org.apache.logging.log4j:log4j-core:2.15.0"
    testImplementation "com.github.javafaker:javafaker:1.0.2"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

tasks.named("dokkaJavadoc") {
    outputDirectory = file("${buildDir}/javadoc")
}

test {
    testLogging.showStandardStreams = false
    testLogging.exceptionFormat = 'full'
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}

check.dependsOn jacocoTestReport

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    from "$buildDir/javadoc"
    archiveClassifier.set("javadoc")
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'potassium-nitrite'
            artifact jar
            artifact sourcesJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Potassium Nitrite'
                description = 'An in-memory, file based embedded nosql persistent document store for Kotlin.'
                url = 'https://github.com/nitrite/nitrite-java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'anidotnet'
                        name = 'Anindya Chatterjee'
                        email = 'anidotnet@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:nitrite/nitrite-java.git'
                    developerConnection = 'scm:git:git@github.com:nitrite/nitrite-java.git'
                    url = 'git@github.com:nitrite/nitrite-java.git'
                }
            }
        }
    }
    repositories {
        if (version.endsWith('SNAPSHOT') || project.hasProperty('release')) {
            maven {
                name = "OSSRH"
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username System.getenv('MAVEN_USERNAME')
                    password System.getenv('MAVEN_PASSWORD')
                }

            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
